* kfs-maven-plugin

Maven plugin for converting/creating mavenized KFS/Overlay distributions

** How does it work?

The KFS maven plugin works in 2 separate use cases

*** Create a new KFS Overlay


** Setup

*** Add the following to your $HOME/.m2/settings.xml

#+BEGIN_EXAMPLE
  <pluginGroups>
    <pluginGroup>org.kualigan.maven.plugins</pluginGroup>
  </pluginGroups>
#+END_EXAMPLE

** Usage

*** Create a new prototype based-on a war file
#+BEGIN_EXAMPLE

svn co https://svn.kuali.org/repos/kfs/trunk kfs
cd kfs
ant dist
mvn -cpu kfs:create-prototype -DgroupId=org.kuali.kfs -DartifactId=kfs -Dversion=5.0 -Dfile=kfs-dev.war

#+END_EXAMPLE

*** Deploying a new prototype based-on a war file
By default, prototypes are installed, but not deployed. If you have a repository somewhere you want to deploy your
prototype to, you can do so by providing a repository id. For example, to deploy to nexus:

#+BEGIN_EXAMPLE

mvn -cpu kfs:create-prototype -DgroupId=org.kuali.kfs -DartifactId=kfs -Dversion=5.0 -Dfile=kfs-dev.war -DrepositoryId=nexus

#+END_EXAMPLE

WAR files can be obtained in many ways. One way is to just checkout the KFS project and run ant dist.

*** Create a mavenized KFS distribution from an SVN repository
This is actually Deprecated now!!! I decided not to support migration since it's virtually impossible to dig up all the changes
you might have done on your project and move them to your overlay. Instead, I recommend taking your current project, building its 
war, then creating a prototype from it, and an overlay off of that.

Instead, migrate is now going to be used in a different way. See after.

*** Overlay using more verbose/formal syntax

#+BEGIN_EXAMPLE

mvn -cpu kfs:create-overlay -DgroupId=org.kualigan -DartifactId=kfs -Dversion=4.0.0

#+END_EXAMPLE

*** Start Jetty/Tomcat with JRebel

Now you can get hot code replacement with both tomcat and jetty using JRebel. The configuration is already builtin to
the overlay created from the archetype. Here's how:

Run the following from your overlay project

#+BEGIN_EXAMPLE

export MAVEN_OPTS="$MAVEN_OPTS -javaagent:<wherever you stuck jrebel>/jrebel.jar"

mvn -Drebel.root=$PWD/../ -pl web jetty:run-war

#+END_EXAMPLE

Or for tomcat7:

#+BEGIN_EXAMPLE

export MAVEN_OPTS="$MAVEN_OPTS -javaagent:<wherever you stuck jrebel>/jrebel.jar"

mvn -Drebel.root=$PWD/../ tomcat7:run-war

#+END_EXAMPLE

There are plans to build in the rebel.root property. Right now, I am using it to define the profile that enables the jrebel maven plugin. This way, 
it isn't part of regular environment deployments. There are other ways to do this though.

Another thing of note is that the above uses /run-war/ goal. This is significant because it differs from the /run/ goal by 
running an assembled war. In the past, this is ill-advised because jetty picks up changes better in an unassembled app, plus
IDE's are capable of updating during runtime. However, with JRebel, this is unnecessary. We can now run a fully assembled webapp
and get runtime updates in a far-and-away more superior method than what we see with Jetty and Hotspot replacement. Check it out,
you won't be disappointed.

** Welcome to the Future (commands yet to be implemented)

*** Overlay using simplified GAV syntax
#+BEGIN_EXAMPLE

mvn -cpu kfs:create-overlay -Dgav=org.kualigan:kfs:4.0.0

#+END_EXAMPLE

*** ROR-style database migrate command

Command to migrate database changes. Will retrieve waiting changes from SCM.

#+BEGIN_EXAMPLE

mvn -cpu kfs:migrate

#+END_EXAMPLE
