* kuali-maven-plugin

Maven plugin for creating/maintaining Rice Maven Overlay distributions

** How does it work?

In the case where an overlay distribution is being created, the kuali-maven-plugin is simply a wrapper on the kr-archetype. The kr-archetype is like any other maven archetype
except the kuali-maven-plugin is used as a way to simplify its use by sprinkling it with some convention-over-configuration flavor.

Normally, you have to either enter your parameters as java properties or go through the tedious interactive mode. In neither case is it
smart enough to guess what you want without you having to enter it in. The kuali-maven-plugin is used much the same way the hpi plugin works
for jenkins/hudson by wrapping the kr-archetype.

** Setup

*** Add the following to your $HOME/.m2/settings.xml

#+BEGIN_EXAMPLE
  <pluginGroups>
    <pluginGroup>org.kualigan.maven.plugins</pluginGroup>
  </pluginGroups>
#+END_EXAMPLE

** Usage

*** Create a new Rice overlay project
#+BEGIN_EXAMPLE

mvn kuali:create-rice-overlay -DgroupId=com.rsmart.kuali.rice -DartifactId=rice

#+END_EXAMPLE

I only specify the groupId and the artifactId. It won't even bother to ask me whether that's what I meant to do and assume 
I want 1.0-SNAPSHOT as my version. It's taking into consideration maven standards which is good. That's what I wanted anyway.
In fact, I'll probably always want that. I can't see why I'd ever add version information here. I'm so glad it doesn't ask me twice.

*** Create a new Rice standalone server project
#+BEGIN_EXAMPLE

mvn kuali:create-standalone-overlay -DgroupId=com.rsmart.kuali.rice -DartifactId=standalone

#+END_EXAMPLE

*** Create a new Rice sampleapp server project
#+BEGIN_EXAMPLE

mvn kuali:create-sampleapp-overlay -DgroupId=com.rsmart.kuali.rice -DartifactId=sampleapp

#+END_EXAMPLE

*** ROR-style database migrate command

Command to migrate database changes. Will retrieve waiting changes from SCM.

#+BEGIN_EXAMPLE

mvn kuali:migrate

#+END_EXAMPLE

** Custom Liquibase Refactorings

Another use case is from the kuali plugin to start a liquibase refactoring

*** Add a system parameter

#+BEGIN_EXAMPLE

mvn kuali:new-system-parameter \
-Dnamespace="KFS-TEM" \
-DparamName="ENABLE_PER_DIEM_LOOKUP_LINKS_IND" \
-DdetailTypeCode="TravelAuthorization" \
-DtypeCode="CONFG" \
-DparamValue="Y"

#+END_EXAMPLE

*** Assign a permission to a role

#+BEGIN_EXAMPLE

mvn kuali:assign-role-permission \

#+END_EXAMPLE
